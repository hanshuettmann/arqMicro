Preguntas orientadoras
1- Los perfiles (líneas o familias de productos) desarrollados por ARM están comprendidos por las líneas Cortex A, R y M.
Cortex A -> procesadores de alto rendimiento orientados a sistemas operativos y aplicaciones
Cortex R-> procesadores orientados a aplicaciones de tiempo real, baja latencia y alta capacidad de procesamiento
Cortex M-> procesadores orientados a sistemas embebidos compactos de consumo masivo

Cortex M
1- 
Cortex M0/M0+: procesadores de bajo costo y bajo consumo. Poseen arquitectura ARMv6-M y arquitectura de memoria de Von Neumann.
CortexM3/M4: procesadores de mayor performance que los M0. Presentan una arquitectura de 32 bits (registros, buses, data path) y aún así pueden manejar instrucciones de 8/16 bits de manera eficiente. Agregan funcionalidades para DSP, modos provilegiados, FPU, etc. Basados en arquitectura ARMv7E-M y arquitectura de memoria Harvard.

2-  Se dice que el set de instrucciones Thumb permite mayor densidad de código ya que permite realizar las mismas tareas empleando un tamaño de programa menor, reduciendo costo y consumo de energíá al utilizar un microcontrolador con menor tamaño de memoria flash.

3- Significa que la arquitectura implementa 2 instrucciones de acceso a memoria, una carga el registro, (luego se realizan operaciones aritmético/lógicas, artimética saturada, etc)  y la otra guarda de registro de nuevo a memoria. Esto significa que no podrán realizarse entonces operaciones CISC donde un operando pueda estar en memoria y el otro en registro.

4- Los procesadores Cortex M cuentan con un mapa de memoria lineal plano de 4 GB. El mapa se encuentra dividido en distintas regiones, donde todas las funcionalidades del micro (como por ejemplo, los periféricos) están mapeadas en esta memoria.

5- Físicamente, existen 2 stack pointers en los procesadores Cortex-M. El stack pointer del OS (Main Stack Pointer MSP) y el stack pointer de las tareas de aplicación (Process Stack Pointer PSP) favorecen la posibilidad de implementar un OS más eficiente y más confiable sobre los Cortex-M. El OS puede definir las regiones del stack permitidas para cada tarea evitando escribir sobre regiones de memoria no asignadas.

7- Se dice que la arquitectura del Cortex es ortogonal ya que en general todos los registros de memoria son de propósito general y todos pueden funcionar como parámetros de las instrucciones de manera indistinta.

8- Permite implementar ejecuciones de la forma "If-then, else". Se agrega sufijo para saber si debe ejecutarse o no según el valor de los flags de estado, convirtiendo la instrucción en un NOP en caso de no ejecutarse. De esta manera, puede ejecutarse un programa sin hacer saltos (branches) cuando desee hacerse una instrucción condicional mejorando la performance.

9- Reset: Excepción que se dispara cuando se reinicia el microcontrolador.
NMI (non maskable interrupt): interrupciones que no pueden ser ignoradas por el microcontrolador. Se utilizan generalmente para atender errores de hardware no recuperables.
HardFault: Similares a las interrupciones diparadas por errores de condición. Generalmente son generadas por eventos como errores en buses, acceso a memorias, violaciones de privilegios, etc.

10- Utilizada para almacenar datos de forma temporal a través de "push" y "pop" que permiten "tomar" y "liberar" registros para su manipulación. También es utilizado para pasar información a funciones y subrutinas. Para el llamado a funciones, la arquitectura copia los valores de los parámetros de entrada y salida sobre los primeros 4 registros de propósito general.

11- En primer lugar luego del reset se leen las dos primeras direcciones del mapa de memoria. El comienzo del espacio de memoria contiene la tabla de vectores. Las 2 primeras direcciones de la tabla de vectores contienen los valores iniciales del MSP y del vector de reset que es la dirección inicial del reset handler. Finalmente, el procesador setea el MSP y el PC con estos valores.

12- Son los periféricos definidos por el fabricante alojados en el core del microcontrolador.

13- Las interrupciones tienen un determinado nivel de prioridad, siendo el nivel 0 el de mayor prioridad. Cuanto más alto el número, menor es la prioridad. Se pueden configurar hasta 240 interrupciones y pueden definirse sub-prioridades para interrupciones seteadas con la misma prioridad. Las interrupciones serán atendidas desde la de más alta prioridad a la más baja.

14- CMSIS es una capa de abstracción de hardware (HAL) para la serie de procesadores Cortex-M utilizada como interfaz de software para periféricos, RTOS, middlewares, etc, permitiendo consistencia y portabilidad entre distintos dispositivos. Gran parte de la HAL está definida por ARM. Por otra parte, el software necesario para el resto de periféricos del microcontrolador son implementados por el fabricante bajo lineamiento y estándar CMSIS.

15- Luego que un evento de interrupción es lanzado, el procesador primero coloca algunos registros sobre el stack antes de ingresar a la rutina de interrupción ISR. Esta operación recibe el nombre de Stacking. Luego que la ISR es atendida estos registros almacenados en el stack son liberados. Esta última operación recibe el nombre de "Unstacking".

17.1-

16-

17.2- Reloj del sistema definido por ARM. Utilizado para contar tiempos de tareas. Implementado por RTOS como base de tiempo. Cada cuenta hace un nuevo llamado al scheduler.

18- Permite definir accesos privilegiados y no privilegiados a determinados espacios de memoria, limitando acceso a recursos a través del MPU. Es decir, puede quitar la capacidad de acceso a determinadas secciones de la memoria.

19- Pueden definirse hasta 8 regiones programables. 

20- Excepción que utiliza el SO para realizar tareas que demandan tiempo. Normalmente se le asigna la prioridad más baja. Se utiliza para realizar los cambios de contexto.

21- SVC Supervisor Call, llamada previamente Software Interrupt. El software puede utilizar esta excepción como una llamada al OS para proveer un servicio. Por ejemplo, un sistema operativo podría proveer acceso al hardware del microcontrolador a través de una excepción SVC, en vez de permitir a al programador acceder directamente.

ISA (Instruction Set Architecture)

1- Los sufijos son opciones que pueden agregarse a la instrucción para realizar tareas distintas como corrimiento de bits o desplazamientos.

2- El sufijo 's' se utiliza para indicar a una instrucción que debe actualizar los flags de estado. Ej: "SUBS r0, r3" indica que debe realizarse una resta entre los valores de los registros r0 y r3 cuyo resultado debe actualizar los flags de estado ( ej EQ si el resultado es igual a 0).

3- Permite realizar una operación de saturación a partir de una única instrucción. Ej:
        mul r4, r3		@ r4 = r4 * r3
        usat r4, #sat, r4	@ saturates to #sat bits
De esta forma, a través de USAT puedo saturar a #sat bits el valor del producto r4 * r3 de forma directa evitando que el resultado supere el valor máximo posible.

4- Por convención del fabricante, los argumentos de las funciones son recibidos en los primeros 4 registros de propósito general r0, r1, r2 y r3. Si son necesarios más de 4 parámetros, es necesario utilizar el stack para la copia y uso de parámetros. El resultado de la función es almacenado para su retorno en r0 en caso de ser de 32 bits ó en r0 y r1 en caso de ser de 64bits. Para poder regresar a la dirección de memoria correspondiente, se utiliza el link register lr para almacenar la dirección de la instrucción siguiente a la función que se ha llamado actualmente.

5- (Single Instruction Multiple Data) Las instrucciones SIMD permiten cargar registros con valores múltiples correspondientes a elementos de menor cantidad de bits a partir de una única instrucción. La instrucción interpreta cada elemento como valor separado permitiendo operarlos de forma paralela. Esto evita que el valor cargado en el registro sea interpretado como una única palabra de 32 bits.

