.syntax unified
.thumb
.text

@ Exported symbols
.global asm_svc
.global asm_sum
.global asm_zeros
.global asm_scalar32
.global asm_scalar16
.global asm_scalar12
.global asm_invertVector
.global asm_removeSample
.global asm_pack32to16
.global asm_getMaxIndex

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
        bx lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   uint32_t asmSum (uint32_t firstOperand, uint32_t secondOperand)
@
@ Received params:
@   r0: firstOperand
@   r1: secondOperand
@
@ Returned value:
@   r0: firstOperand + secondOperand result
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void asm_zeros (uint32_t *vector, uint32_t longitud);
@
@ Received params:
@   r0: *vector
@   r1: longitud
@
.thumb_func
    asm_zeros:
        @ Registros usados
        @   r2: valor cero
        mov r2, 0           @ constante cero
    .asm_zeros_loop:
        str r2, [r0], 4     @ sizeof(uint32_t) == 4, *vector++ = r2
        subs r1, 1          @ --longitud
        bne .asm_zeros_loop
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void asm_scalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t length,
@	uint32_t scalar);
@
@ Received params:
@   r0: *vectorIn
@   r1: *vectorOut
@	r2: length
@	r3: scalar
@	*vectorOut = *vectorIn * scalar;
@	++vectorOut;
.thumb_func
    asm_scalar32:
    	push {r4}
    .asm_scalar32_loop:
    	ldr r4, [r0], 4		@ r4 = *r0, r0 += 4
        mul r4, r3			@ r4 = r4 * r3
        str r4, [r1], 4     @ sizeof(uint32_t) == 4, *vectorOut++ = r4
        subs r2, 1          @ --longitud
        bne .asm_scalar32_loop
        pop {r4}
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_scalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t length,
@	uint16_t scalar);
@
@ Received params:
@   r0: *vectorIn
@   r1: *vectorOut
@	r2: length
@	r3: scalar
@	*vectorOut = *vectorIn * scalar;
@	++vectorOut;
.thumb_func
    asm_scalar16:
    	push {r4}
    .asm_scalar16_loop:
    	ldrh r4, [r0], 2	@ r4 = *r0, r0 += 2
        mul r4, r3			@ r4 = r4 * r3
        strh r4, [r1], 2    @ sizeof(uint16_t) == 2, *vectorOut++ = r4
        subs r2, 1          @ --longitud
        bne .asm_scalar16_loop
        pop {r4}
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void asm_scalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t length,
@	uint16_t scalar);
@
@ Registers used:
@   r0: *vectorIn
@   r1: *vectorOut
@	r2: length
@	r3: scalar
@
@	*vectorOut = *vectorIn * scalar;
@	++vectorOut;
.thumb_func
    asm_scalar12:
    	push {r4}
    	push {r5}
    	mov r5, 0x0FFF
    .asm_scalar12_loop:
    	ldrh r4, [r0], 2	@ r4 = *r0, r0 += 2
        mul r4, r3			@ r4 = r4 * r3
        cmp r4, r5			@ r4 - r5
        bpl .asm_scalar12_capped @ go to .asm_scalar12_capped: if positive
		b .asm_scalar12_finish

     .asm_scalar12_capped:
     	mov r4, r5			@ r4 = 0x0FFF
		b .asm_scalar12_finish

	.asm_scalar12_finish:
        strh r4, [r1], 2    @ sizeof(uint16_t) == 2, *vectorOut++ = r4
        subs r2, 1          @ --longitud
        bne .asm_scalar12_loop
        pop {r5}
        pop {r4}
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void asm_invertVector(uint16_t *vector, uint32_t length);
@
@ Received params:
@   r0: *vector
@	r1: length
@ Registers used:
@	r2: auxValue1
@	r3: auxValue2
@	r4: length - 1 - i
@	r5: index
.thumb_func
    asm_invertVector:
    	push {r4}
    	push {r5}
    	mov r5, #0			@index = 0
    .asm_invertVector_loop:
    	ldrh r2, [r0, r5, lsl 1]	@ r2 = *(r0 + i*2) -> auxValue1 = vector[i*2]
    	mov r4, r1					@ r4 = length
    	sub r4, 1					@ r4 = length - 1
    	sub r4, r5					@ r4 = length - 1 - i -> will be the offset for the last element
    	ldrh r3, [r0, r4, lsl 1]			@ r3 = vector[length - 1 - i] -> auxValue2 = vector[length - 1 - i]

    	strh r3, [r0, r5, lsl 1]			@*(r0 + i) = *(r0 + length - 1 - i)
    	strh r2, [r0, r4, lsl 1] 			@*(r0 + length - 1 - i) = *(r0 + i)

		add r5, 1
		mov r4, r1, lsr 1   @ r4 = r1 / 2
		cmp r5, r4			@ r5 - r4 -> i - length / 2
        bne .asm_invertVector_loop @ go to .asm_invertVector_loop: if i - length / 2 != 0

        pop {r5}
        pop {r4}
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void removeSample(int32_t *vectorIn, int32_t *vectorOut, uint32_t length,
@		uint32_t N);
@
@ Received params:
@   r0: *vectorIn
@	r1: *vectorOut
@	r2: length
@	r3: N
@ Registers used:
@	r4: index i
@	r5: index j
@	r6: auxValue1
@	r7: auxValue2
.thumb_func
    asm_removeSample:
    	push {r4}
    	push {r5}
    	push {r6}
    	push {r7}
    	mov r4, #0			@ index i = 0
		mov r5, #0			@ index j = 0
    .asm_removeSample_loop:
    	add r6, r3, 1			@ r6 = N + 1
		udiv r7, r4, r6			@ r7 = i / (N + 1)
		mul r7, r6
		sub r4, r7

		str r6, [r1]		@

    	add r4, 1			@ index i += 1
    	mov r6, r2			@ r6 = length
		add r6, 1			@ r6 += 1
		cmp r4, r6			@ r4 - r6 -> i - length + 1
        bne .asm_removeSample_loop @ go to .asm_removeSample_loop: if i - length + 1 != 0

    	pop {r7}
		pop {r6}
        pop {r5}
        pop {r4}
        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t length);
@
@ Received params:
@   r0: *vectorIn
@	r1: *vectorOut
@	r2: length
@ Registers used:
@	r3: auxValue
.thumb_func
    asm_pack32to16:
    .asm_pack32to16_loop:
    	ldrsh r3, [r0], 4		 @ r3 = r0*, ++r0
		strh r3, [r1], 2

    	subs r2, 1				 @ --length
        bne .asm_pack32to16_loop @ go to .asm_pack32to16_loop: if length != 0

        bx lr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototype "C":
@   uint32_t getMaxIndex(int32_t *vectorIn, uint32_t length);
@
@ Received params:
@   r0: *vectorIn
@	r1: length
@ Registers used:
@	r2: index
@	r3: auxValue
@	r4: auxMax
@	r5: auxIndex
.thumb_func
    asm_getMaxIndex:
    	push {r4}
    	push {r5}
    	mov r2, 0
    	mov r3, 0
    	ldr r4, [r0]				@ auxMax = vectorIn[0]
    	mov r5, 0
    .asm_getMaxIndex_loop:
    	ldr r3, [r0], 4				@ auxValue = vectorIn[i], ++vectorIn
    	cmp	r3, r4					@ r3 - r4 -> current value greater than auxMax
		bpl .asm_getMaxIndex_load

	.asm_getMaxIndex_finish:
		add r2, 1					@ ++index
    	subs r1, 1					@ --length
        bne .asm_getMaxIndex_loop	@ go to .asm_getMaxIndex_loop: if length != 0

		mov r0, r5					@ r0 = maxindex
		pop {r5}
		pop {r4}
        bx lr

	.asm_getMaxIndex_load:
    	mov r4, r3					@ auxMax = auxValue(currentValue)
        mov	r5, r2					@ auxIndex = index
        b .asm_getMaxIndex_finish
